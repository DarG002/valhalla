#!/usr/bin/env python3

import argparse
from io import BytesIO
import json
import logging
import os
from pathlib import Path
import struct
import sys
import tarfile
from tarfile import BLOCKSIZE
from typing import Dict, Tuple, List

description = """Builds a tar extract from the tiles in mjolnir.tile_dir to the path specified in mjolnir.tile_extract."""

# "=" prefix means native byte order with standard size and no alignment:
# https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment
STRUCT_FORMAT = '<LQL'
STRUCT_SIZE = struct.calcsize(STRUCT_FORMAT)
INDEX_FILE = "index.bin"

parser = argparse.ArgumentParser(description=description)
parser.add_argument("-c", "--config", help="Absolute or relative path to the Valhalla config JSON.", type=Path)
parser.add_argument("-v", "--verbosity", help="Accumulative verbosity flags; -v: INFO, -vv: DEBUG", action='count', default=0)

# set up the logger basics
LOGGER = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)5s: %(message)s"))
LOGGER.addHandler(handler)
LOGGER.setLevel(logging.WARNING)


def get_tile_count(in_path: Path) -> int:
    """Recursively fills the passed map with tile path & size info"""
    count = 0
    for base, dirs, files in os.walk(in_path):
        count += len(list(filter(lambda f: f.endswith('.gph'), files)))

    return count


def get_tile_id(path: str):
    """Turns a tile path into a numeric GraphId"""
    level, idx = path[:-4].split('/', 1)

    return int(level) | (int(idx.replace('/', '')) << 3)


def create_extract(tiles_fp: Path, extract_fp: Path):
    """Actually creates the tar ball. Break out of main function for testability."""
    if not tiles_fp.exists() or not tiles_fp.is_dir():
        LOGGER.critical(f"Directory 'mjolnir.tile_dir': {tiles_fp} was not found on the filesystem.")
        sys.exit(1)

    tiles_count = get_tile_count(tiles_fp)
    if not tiles_count:
        LOGGER.critical(f"Directory {tiles_fp} does not contain any usable graph tiles.")
        sys.exit(1)

    # write the in-memory index file
    index_size = STRUCT_SIZE * tiles_count
    index_fd = BytesIO(b'0' * index_size)
    index_fd.seek(0)

    # first add the index file, then the tile dir to the tarfile
    with tarfile.open(extract_fp, 'w') as tar:
        tarinfo = tarfile.TarInfo(INDEX_FILE)
        tarinfo.size = index_size
        tar.addfile(tarinfo, index_fd)
        index_fd.close()

        tar.add(str(tiles_fp), recursive=True, arcname='')

    # get the offset and size from the tarred tile members
    index: List[Tuple[str, int, int]] = list()
    with tarfile.open(extract_fp, 'r|') as tar:
        for member in tar.getmembers():
            if member.name.endswith('.gph'):
                LOGGER.debug(f"Tile {member.name} with offset: {member.offset_data}, size: {member.size}")

                index.append((get_tile_id(member.name), member.offset_data, member.size))

    # write back the actual index info
    with open(extract_fp, 'r+b') as tar:
        # jump to the data block, index.bin is the first file
        tar.seek(BLOCKSIZE)
        for entry in index:
            tar.write(struct.pack(STRUCT_FORMAT, *entry))

    print(f"Finished tarring {tiles_count} tiles to {extract_fp}")


if __name__ == '__main__':
    args = parser.parse_args()
    with open(args.config) as f:
        config = json.load(f)
    extract_fp: Path = Path(config["mjolnir"]["tile_extract"])
    tiles_fp: Path = Path(config["mjolnir"]["tile_dir"])

    # set the right logger level
    if args.verbosity == 0:
        LOGGER.setLevel(logging.CRITICAL)
    elif args.verbosity == 1:
        LOGGER.setLevel(logging.INFO)
    elif args.verbosity >= 2:
        LOGGER.setLevel(logging.DEBUG)

    create_extract(tiles_fp, extract_fp)
